// This file is auto-generated by @hey-api/openapi-ts

import { type Options, Filesystem } from '../../sdk.gen';
import type { _JSONValue, UseQueryOptions, UseMutationOptions } from '@pinia/colada';
import type { GetFilesystemSummaryData, GetFilesystemSummaryResponse, FindPhotosData, FindPhotosError, FindPhotosResponse, FindGpxFilesData, FindGpxFilesResponse, ClearThumbnailsCacheData } from '../../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseURL?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as undefined;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as undefined;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as undefined;
    }
    return [
        params
    ];
};

export const getFilesystemSummaryQueryKey = (options?: Options<GetFilesystemSummaryData>) => createQueryKey('getFilesystemSummary', options, [
    'filesystem'
]);

/**
 * Slg Filesystem Summary
 */
export const getFilesystemSummaryQuery = (options?: Options<GetFilesystemSummaryData>): UseQueryOptions<GetFilesystemSummaryResponse, AxiosError<Error>> => {
    return {
        key: getFilesystemSummaryQueryKey(options),
        query: async (context) => {
            const { data } = await Filesystem.getFilesystemSummary({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const findPhotosQueryKey = (options: Options<FindPhotosData>) => createQueryKey('findPhotos', options, [
    'filesystem'
]);

/**
 * Find Files In Folder
 * Find photos in a specific folder
 */
export const findPhotosQuery = (options: Options<FindPhotosData>): UseQueryOptions<FindPhotosResponse, AxiosError<FindPhotosError>> => {
    return {
        key: findPhotosQueryKey(options),
        query: async (context) => {
            const { data } = await Filesystem.findPhotos({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const findGpxFilesQueryKey = (options?: Options<FindGpxFilesData>) => createQueryKey('findGpxFiles', options, [
    'filesystem'
]);

/**
 * Find Gpx Files
 * Find GPX files in gallery root
 */
export const findGpxFilesQuery = (options?: Options<FindGpxFilesData>): UseQueryOptions<FindGpxFilesResponse, AxiosError<Error>> => {
    return {
        key: findGpxFilesQueryKey(options),
        query: async (context) => {
            const { data } = await Filesystem.findGpxFiles({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Clear Thumbnails Cache
 * Clear all thumbnails cache
 */
export const clearThumbnailsCacheMutation = (options?: Options<ClearThumbnailsCacheData>): UseMutationOptions<unknown, Options<ClearThumbnailsCacheData>, AxiosError<Error>> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await Filesystem.clearThumbnailsCache({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};