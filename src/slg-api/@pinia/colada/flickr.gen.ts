// This file is auto-generated by @hey-api/openapi-ts

import { type Options, Flickr } from '../../sdk.gen';
import type { _JSONValue, UseQueryOptions } from '@pinia/colada';
import type { LoginData, LoginResponse, PhotoInfoData, PhotoInfoError, PhotoInfoResponse } from '../../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseURL?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as undefined;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as undefined;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as undefined;
    }
    return [
        params
    ];
};

export const loginQueryKey = (options?: Options<LoginData>) => createQueryKey('login', options, [
    'flickr'
]);

/**
 * Login
 */
export const loginQuery = (options?: Options<LoginData>): UseQueryOptions<LoginResponse, AxiosError<Error>> => {
    return {
        key: loginQueryKey(options),
        query: async (context) => {
            const { data } = await Flickr.login({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

export const photoInfoQueryKey = (options: Options<PhotoInfoData>) => createQueryKey('photoInfo', options, [
    'flickr'
]);

/**
 * Photo Info
 */
export const photoInfoQuery = (options: Options<PhotoInfoData>): UseQueryOptions<PhotoInfoResponse, AxiosError<PhotoInfoError>> => {
    return {
        key: photoInfoQueryKey(options),
        query: async (context) => {
            const { data } = await Flickr.photoInfo({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};