// This file is auto-generated by @hey-api/openapi-ts

import { type Options, Photos } from '../../sdk.gen';
import type { _JSONValue, UseQueryOptions, UseMutationOptions } from '@pinia/colada';
import type { GetPhotosSummaryData, GetPhotosSummaryResponse, ImportPhotosData, ImportPhotosError, ImportPhotosResponse } from '../../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'body' | 'path'> & {
        _id: string;
        baseURL?: _JSONValue;
        headers?: _JSONValue;
        query?: _JSONValue;
        tags?: _JSONValue;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (tags) {
        params.tags = tags as unknown as undefined;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers as unknown as undefined;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query as unknown as undefined;
    }
    return [
        params
    ];
};

export const getPhotosSummaryQueryKey = (options?: Options<GetPhotosSummaryData>) => createQueryKey('getPhotosSummary', options, [
    'photos'
]);

/**
 * Get Photos Summary
 */
export const getPhotosSummaryQuery = (options?: Options<GetPhotosSummaryData>): UseQueryOptions<GetPhotosSummaryResponse, AxiosError<Error>> => {
    return {
        key: getPhotosSummaryQueryKey(options),
        query: async (context) => {
            const { data } = await Photos.getPhotosSummary({
                ...options,
                ...context,
                throwOnError: true
            });
            return data;
        }
    };
};

/**
 * Import Photos
 */
export const importPhotosMutation = (options: Options<ImportPhotosData>): UseMutationOptions<ImportPhotosResponse, Options<ImportPhotosData>, AxiosError<ImportPhotosError>> => {
    return {
        mutation: async (fnOptions) => {
            const { data } = await Photos.importPhotos({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
};