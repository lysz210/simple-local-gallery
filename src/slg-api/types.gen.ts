// This file is auto-generated by @hey-api/openapi-ts

/**
 * Bounds
 */
export type Bounds = {
    min: Point;
    max: Point;
};

/**
 * FileSystemSummary
 */
export type FileSystemSummary = {
    /**
     * Folders
     */
    folders: Array<FolderSummary>;
    /**
     * Gpx Files Count
     */
    gpx_files_count: number;
};

/**
 * FolderSummary
 */
export type FolderSummary = {
    /**
     * Folder
     */
    folder: string;
    /**
     * Total Photos
     */
    total_photos: number;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Photo
 */
export type Photo = {
    /**
     * Id
     */
    id: number;
    /**
     * Folder
     */
    folder: string;
    /**
     * Filename
     */
    filename: string;
    /**
     * Description
     */
    description: string;
    /**
     * Original Created At
     */
    original_created_at: string;
    point?: PointWithTrackUid | null;
};

/**
 * PhotoSummary
 */
export type PhotoSummary = {
    /**
     * Folder
     */
    folder: string;
    /**
     * Total Photos
     */
    total_photos: number;
    /**
     * First Taken At
     */
    first_taken_at: string;
    /**
     * Last Taken At
     */
    last_taken_at: string;
};

/**
 * Point
 */
export type Point = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Elevation
     */
    elevation?: number | null;
    /**
     * Timestamp
     */
    timestamp: string;
};

/**
 * PointWithTrackUid
 */
export type PointWithTrackUid = {
    /**
     * Id
     */
    id?: number | null;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Elevation
     */
    elevation?: number | null;
    /**
     * Timestamp
     */
    timestamp: string;
    /**
     * Track Uid
     */
    track_uid: string;
};

/**
 * Track
 */
export type Track = {
    /**
     * Uid
     */
    uid: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    bounds?: Bounds | null;
    /**
     * Timestamp
     */
    timestamp?: string | null;
    /**
     * Points
     */
    points?: Array<Point> | null;
};

/**
 * TrackSummary
 */
export type TrackSummary = {
    /**
     * Uid
     */
    uid: string;
    /**
     * Name
     */
    name: string;
    /**
     * Total Points
     */
    total_points: number;
    bounds?: Bounds | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetPhotosSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/photos';
};

export type GetPhotosSummaryResponses = {
    /**
     * Response Get Photos Summary
     * Successful Response
     */
    200: Array<PhotoSummary>;
};

export type GetPhotosSummaryResponse = GetPhotosSummaryResponses[keyof GetPhotosSummaryResponses];

export type GetPhotosInFolderData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Folder
         */
        folder?: string | null;
    };
    url: '/api/v1/photos/search';
};

export type GetPhotosInFolderErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPhotosInFolderError = GetPhotosInFolderErrors[keyof GetPhotosInFolderErrors];

export type GetPhotosInFolderResponses = {
    /**
     * Response Get Photos In Folder
     * Successful Response
     */
    200: Array<Photo>;
};

export type GetPhotosInFolderResponse = GetPhotosInFolderResponses[keyof GetPhotosInFolderResponses];

export type GetPhotoByIdData = {
    body?: never;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/photos/{id}';
};

export type GetPhotoByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPhotoByIdError = GetPhotoByIdErrors[keyof GetPhotoByIdErrors];

export type GetPhotoByIdResponses = {
    /**
     * Response Get Photo By Id
     * Successful Response
     */
    200: Photo | null;
};

export type GetPhotoByIdResponse = GetPhotoByIdResponses[keyof GetPhotoByIdResponses];

export type UpdatePhotoPointData = {
    body: PointWithTrackUid;
    path: {
        /**
         * Id
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/photos/{id}/point';
};

export type UpdatePhotoPointErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePhotoPointError = UpdatePhotoPointErrors[keyof UpdatePhotoPointErrors];

export type UpdatePhotoPointResponses = {
    /**
     * Response Update Photo Point
     * Successful Response
     */
    200: Photo | null;
};

export type UpdatePhotoPointResponse = UpdatePhotoPointResponses[keyof UpdatePhotoPointResponses];

export type ImportPhotosData = {
    /**
     * Photos
     */
    body: Array<string>;
    path?: never;
    query?: never;
    url: '/api/v1/photos/import';
};

export type ImportPhotosErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImportPhotosError = ImportPhotosErrors[keyof ImportPhotosErrors];

export type ImportPhotosResponses = {
    /**
     * Response Import Photos
     * Successful Response
     */
    200: {
        [key: string]: number;
    };
};

export type ImportPhotosResponse = ImportPhotosResponses[keyof ImportPhotosResponses];

export type GetGalleryRootData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/settings/gallery-root';
};

export type GetGalleryRootResponses = {
    /**
     * Response Get Gallery Root
     * Successful Response
     */
    200: string;
};

export type GetGalleryRootResponse = GetGalleryRootResponses[keyof GetGalleryRootResponses];

export type ResetGalleryRootData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/settings/gallery-root/reset';
};

export type ResetGalleryRootResponses = {
    /**
     * Response Reset Gallery Root
     * Successful Response
     */
    200: string;
};

export type ResetGalleryRootResponse = ResetGalleryRootResponses[keyof ResetGalleryRootResponses];

export type GetTracksSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tracks';
};

export type GetTracksSummaryResponses = {
    /**
     * Response Get Tracks Summary
     * Successful Response
     */
    200: Array<TrackSummary>;
};

export type GetTracksSummaryResponse = GetTracksSummaryResponses[keyof GetTracksSummaryResponses];

export type InspectGpxFileData = {
    body?: never;
    path: {
        /**
         * Gpx File
         */
        gpx_file: string;
    };
    query?: never;
    url: '/api/v1/tracks/inspect/{gpx_file}';
};

export type InspectGpxFileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InspectGpxFileError = InspectGpxFileErrors[keyof InspectGpxFileErrors];

export type InspectGpxFileResponses = {
    /**
     * Successful Response
     */
    200: Track;
};

export type InspectGpxFileResponse = InspectGpxFileResponses[keyof InspectGpxFileResponses];

export type ImportPgxFileData = {
    body?: never;
    path: {
        /**
         * Gpx File
         */
        gpx_file: string;
    };
    query?: never;
    url: '/api/v1/tracks/import/{gpx_file}';
};

export type ImportPgxFileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ImportPgxFileError = ImportPgxFileErrors[keyof ImportPgxFileErrors];

export type ImportPgxFileResponses = {
    /**
     * Response Import Pgx File
     * Successful Response
     */
    200: string;
};

export type ImportPgxFileResponse = ImportPgxFileResponses[keyof ImportPgxFileResponses];

export type LocatePhotoOnTrackData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Photo Id
         */
        photo_id: number;
    };
    url: '/api/v1/tracks/locate-photo';
};

export type LocatePhotoOnTrackErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LocatePhotoOnTrackError = LocatePhotoOnTrackErrors[keyof LocatePhotoOnTrackErrors];

export type LocatePhotoOnTrackResponses = {
    /**
     * Response Locate Photo On Track
     * Successful Response
     */
    200: Array<PointWithTrackUid>;
};

export type LocatePhotoOnTrackResponse = LocatePhotoOnTrackResponses[keyof LocatePhotoOnTrackResponses];

export type GetFilesystemSummaryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/fs';
};

export type GetFilesystemSummaryResponses = {
    /**
     * Successful Response
     */
    200: FileSystemSummary;
};

export type GetFilesystemSummaryResponse = GetFilesystemSummaryResponses[keyof GetFilesystemSummaryResponses];

export type FindPhotosData = {
    body?: never;
    path: {
        /**
         * Folder
         */
        folder: string;
    };
    query?: never;
    url: '/api/v1/fs/photos/{folder}';
};

export type FindPhotosErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type FindPhotosError = FindPhotosErrors[keyof FindPhotosErrors];

export type FindPhotosResponses = {
    /**
     * Response Find Photos
     * Successful Response
     */
    200: Array<string>;
};

export type FindPhotosResponse = FindPhotosResponses[keyof FindPhotosResponses];

export type FindGpxFilesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/fs/gpx';
};

export type FindGpxFilesResponses = {
    /**
     * Response Find Gpx Files
     * Successful Response
     */
    200: Array<string>;
};

export type FindGpxFilesResponse = FindGpxFilesResponses[keyof FindGpxFilesResponses];

export type ClearThumbnailsCacheData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/fsthumbnails';
};

export type ClearThumbnailsCacheResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};