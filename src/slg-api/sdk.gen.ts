// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetPhotosSummaryData, GetPhotosSummaryResponses, GetPhotosInFolderData, GetPhotosInFolderResponses, GetPhotosInFolderErrors, GetPhotoByIdData, GetPhotoByIdResponses, GetPhotoByIdErrors, ImportPhotosData, ImportPhotosResponses, ImportPhotosErrors, GetGalleryRootData, GetGalleryRootResponses, ResetGalleryRootData, ResetGalleryRootResponses, GetTracksSummaryData, GetTracksSummaryResponses, InspectGpxFileData, InspectGpxFileResponses, InspectGpxFileErrors, ImportPgxFileData, ImportPgxFileResponses, ImportPgxFileErrors, LocatePhotoOnTrackData, LocatePhotoOnTrackResponses, LocatePhotoOnTrackErrors, GetFilesystemSummaryData, GetFilesystemSummaryResponses, FindPhotosData, FindPhotosResponses, FindPhotosErrors, FindGpxFilesData, FindGpxFilesResponses, ClearThumbnailsCacheData, ClearThumbnailsCacheResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Photos {
    /**
     * Get Photos Summary
     */
    public static getPhotosSummary<ThrowOnError extends boolean = false>(options?: Options<GetPhotosSummaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPhotosSummaryResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/photos',
            ...options
        });
    }
    
    /**
     * Get Photos In Folder
     */
    public static getPhotosInFolder<ThrowOnError extends boolean = false>(options?: Options<GetPhotosInFolderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPhotosInFolderResponses, GetPhotosInFolderErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/photos/search',
            ...options
        });
    }
    
    /**
     * Get Photo By Id
     */
    public static getPhotoById<ThrowOnError extends boolean = false>(options: Options<GetPhotoByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPhotoByIdResponses, GetPhotoByIdErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/photos/{id}',
            ...options
        });
    }
    
    /**
     * Import Photos
     */
    public static importPhotos<ThrowOnError extends boolean = false>(options: Options<ImportPhotosData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ImportPhotosResponses, ImportPhotosErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/photos/import',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
}

export class Settings {
    /**
     * Get Gallery Root
     */
    public static getGalleryRoot<ThrowOnError extends boolean = false>(options?: Options<GetGalleryRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetGalleryRootResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/settings/gallery-root',
            ...options
        });
    }
    
    /**
     * Reset Gallery Root
     */
    public static resetGalleryRoot<ThrowOnError extends boolean = false>(options?: Options<ResetGalleryRootData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<ResetGalleryRootResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/settings/gallery-root/reset',
            ...options
        });
    }
}

export class Tracks {
    /**
     * Get Tracks Summary
     */
    public static getTracksSummary<ThrowOnError extends boolean = false>(options?: Options<GetTracksSummaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTracksSummaryResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/tracks',
            ...options
        });
    }
    
    /**
     * Inspect Gpx File
     */
    public static inspectGpxFile<ThrowOnError extends boolean = false>(options: Options<InspectGpxFileData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<InspectGpxFileResponses, InspectGpxFileErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/tracks/inspect/{gpx_file}',
            ...options
        });
    }
    
    /**
     * Import Gpx File Into Db
     */
    public static importPgxFile<ThrowOnError extends boolean = false>(options: Options<ImportPgxFileData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<ImportPgxFileResponses, ImportPgxFileErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/tracks/import/{gpx_file}',
            ...options
        });
    }
    
    /**
     * Locate Photo On Track
     */
    public static locatePhotoOnTrack<ThrowOnError extends boolean = false>(options: Options<LocatePhotoOnTrackData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<LocatePhotoOnTrackResponses, LocatePhotoOnTrackErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/tracks/locate-photo',
            ...options
        });
    }
}

export class Filesystem {
    /**
     * Slg Filesystem Summary
     */
    public static getFilesystemSummary<ThrowOnError extends boolean = false>(options?: Options<GetFilesystemSummaryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetFilesystemSummaryResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/fs',
            ...options
        });
    }
    
    /**
     * Find Files In Folder
     * Find photos in a specific folder
     */
    public static findPhotos<ThrowOnError extends boolean = false>(options: Options<FindPhotosData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<FindPhotosResponses, FindPhotosErrors, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/fs/photos/{folder}',
            ...options
        });
    }
    
    /**
     * Find Gpx Files
     * Find GPX files in gallery root
     */
    public static findGpxFiles<ThrowOnError extends boolean = false>(options?: Options<FindGpxFilesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<FindGpxFilesResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/fs/gpx',
            ...options
        });
    }
    
    /**
     * Clear Thumbnails Cache
     * Clear all thumbnails cache
     */
    public static clearThumbnailsCache<ThrowOnError extends boolean = false>(options?: Options<ClearThumbnailsCacheData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).delete<ClearThumbnailsCacheResponses, unknown, ThrowOnError>({
            responseType: 'json',
            url: '/api/v1/fsthumbnails',
            ...options
        });
    }
}